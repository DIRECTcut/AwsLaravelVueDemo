#!/bin/bash

set -e

echo "üß™ Running pre-commit checks..."

# Get list of staged files
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep '\.php$' || true)
STAGED_JS_TS_VUE_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|ts|vue|css)$' || true)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    printf "${GREEN}‚úì${NC} %s\n" "$1"
}

print_error() {
    printf "${RED}‚úó${NC} %s\n" "$1"
}

print_info() {
    printf "${YELLOW}‚Ñπ${NC} %s\n" "$1"
}

# Only run checks if we have relevant staged files
if [ -n "$STAGED_PHP_FILES" ]; then
    echo ""
    echo "üé® Formatting staged PHP files with Laravel Pint..."
    
    # Format staged PHP files and add them back to staging
    echo "$STAGED_PHP_FILES" | xargs ./vendor/bin/pint
    echo "$STAGED_PHP_FILES" | xargs git add
    
    print_status "PHP files formatted and re-staged"
    
    echo ""
    echo "üîç Running PHPStan static analysis on staged PHP files..."
    
    # Run PHPStan analysis
    if composer analyze; then
        print_status "PHPStan analysis passed"
    else
        print_error "PHPStan analysis failed"
        echo ""
        echo "Please fix static analysis errors before committing."
        echo "You can run 'composer analyze' to see the full report."
        exit 1
    fi
fi

# Always run PHP tests if there are any PHP changes
if [ -n "$STAGED_PHP_FILES" ] || git diff --cached --name-only | grep -qE '\.(php|json)$'; then
    echo ""
    echo "üìã Running PHP tests..."
    
    if composer test; then
        print_status "PHP tests passed"
    else
        print_error "PHP tests failed"
        echo ""
        echo "Please fix failing tests before committing."
        exit 1
    fi
fi

# Only run frontend checks if we have relevant staged files
if [ -n "$STAGED_JS_TS_VUE_FILES" ]; then
    echo ""
    echo "üîç Running ESLint on staged frontend files..."
    
    # Run ESLint only on staged files
    if echo "$STAGED_JS_TS_VUE_FILES" | xargs npx eslint --fix; then
        print_status "Frontend linting passed"
        # Re-stage files that may have been auto-fixed
        echo "$STAGED_JS_TS_VUE_FILES" | xargs git add
    else
        print_error "Frontend linting failed"
        echo ""
        echo "Please fix linting errors before committing."
        echo "You can run 'npm run lint' to auto-fix some issues."
        exit 1
    fi
    
    echo ""
    echo "üéØ Running Prettier on staged frontend files..."
    
    # Check and format staged frontend files
    if echo "$STAGED_JS_TS_VUE_FILES" | xargs npx prettier --check; then
        print_status "Frontend formatting is consistent"
    else
        print_info "Formatting staged frontend files..."
        echo "$STAGED_JS_TS_VUE_FILES" | xargs npx prettier --write
        echo "$STAGED_JS_TS_VUE_FILES" | xargs git add
        print_status "Frontend files formatted and re-staged"
    fi
    
    echo ""
    echo "üß™ Running frontend tests..."
    
    if npm test -- --run; then
        print_status "Frontend tests passed"
    else
        print_error "Frontend tests failed"
        echo ""
        echo "Please fix failing frontend tests before committing."
        echo "You can run 'npm test' to run the tests locally."
        exit 1
    fi
fi

# If no relevant files are staged, inform the user
if [ -z "$STAGED_PHP_FILES" ] && [ -z "$STAGED_JS_TS_VUE_FILES" ]; then
    print_info "No PHP, JS, TS, Vue, or CSS files staged - skipping code quality checks"
fi

echo ""
print_status "All pre-commit checks passed! üéâ"
echo ""
